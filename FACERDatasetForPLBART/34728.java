    /**
     * å¤„ç?†æˆ‘ä»¬æ‹–åŠ¨ListView itemçš„é€»è¾‘
     */
    @Override
    public boolean onTouchEvent(MotionEvent ev) {
        if (isSlide && slidePosition != AdapterView.INVALID_POSITION) {
            requestDisallowInterceptTouchEvent(true);
            addVelocityTracker(ev);
            final int action = ev.getAction();
            int x = (int) ev.getX();
            switch (action) {
                case MotionEvent.ACTION_DOWN:
                    break;
                case MotionEvent.ACTION_MOVE:

                    MotionEvent cancelEvent = MotionEvent.obtain(ev);
                    cancelEvent.setAction(MotionEvent.ACTION_CANCEL |
                            (ev.getActionIndex()<< MotionEvent.ACTION_POINTER_INDEX_SHIFT));
                    onTouchEvent(cancelEvent);

                    int deltaX = downX - x;
                    downX = x;

                    // æ‰‹æŒ‡æ‹–åŠ¨itemViewæ»šåŠ¨, deltaXå¤§äºŽ0å?‘å·¦æ»šåŠ¨ï¼Œå°?äºŽ0å?‘å?³æ»š
                    itemView.scrollBy(deltaX, 0);

                    return true;  //æ‹–åŠ¨çš„æ—¶å€™ListViewä¸?æ»šåŠ¨
                case MotionEvent.ACTION_UP:
                    int velocityX = getScrollVelocity();
                    if (velocityX > SNAP_VELOCITY) {
                        scrollRight();
                    } else if (velocityX < -SNAP_VELOCITY) {
                        scrollLeft();
                    } else {
                        scrollByDistanceX();
                    }

                    recycleVelocityTracker();
                    // æ‰‹æŒ‡ç¦»å¼€çš„æ—¶å€™å°±ä¸?å“?åº”å·¦å?³æ»šåŠ¨
                    isSlide = false;
                    break;
            }
        }

        //å?¦åˆ™ç›´æŽ¥äº¤ç»™ListViewæ?¥å¤„ç?†onTouchEventäº‹ä»¶
        return super.onTouchEvent(ev);
    }

