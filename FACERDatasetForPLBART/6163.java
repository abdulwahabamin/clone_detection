    public static List<File> getSpecificTypeOfFile(Context context, String[] extension) {
        List<String> fileUrls = new ArrayList<>();

        //ä»Žå¤–å­˜ä¸­èŽ·å?–
        Uri fileUri = MediaStore.Files.getContentUri("external");
        //ç­›é€‰åˆ—ï¼Œè¿™é‡Œå?ªç­›é€‰äº†ï¼šæ–‡ä»¶è·¯å¾„å’Œä¸?å?«å?Žç¼€çš„æ–‡ä»¶å??
        String[] projection = new String[]{
                MediaStore.Files.FileColumns.DATA, MediaStore.Files.FileColumns.TITLE
        };
        //æž„é€ ç­›é€‰è¯­å?¥
        String selection = "";
        for (int i = 0; i < extension.length; i++) {
            if (i != 0) {
                selection = selection + " OR ";
            }
            selection = selection + MediaStore.Files.FileColumns.DATA + " LIKE '%" + extension[i] + "'";
        }
        //æŒ‰æ—¶é—´é€’å¢žé¡ºåº?å¯¹ç»“æžœè¿›è¡ŒæŽ’åº?;å¾…ä¼šä»Žå?Žå¾€å‰?ç§»åŠ¨æ¸¸æ ‡å°±å?¯å®žçŽ°æ—¶é—´é€’å‡?
        String sortOrder = MediaStore.Files.FileColumns.DATE_MODIFIED;
        //èŽ·å?–å†…å®¹è§£æž?å™¨å¯¹è±¡
        ContentResolver resolver = context.getContentResolver();
        //èŽ·å?–æ¸¸æ ‡
        Cursor cursor = resolver.query(fileUri, projection, selection, null, sortOrder);
        if (cursor == null)
            return null;
        //æ¸¸æ ‡ä»Žæœ€å?Žå¼€å§‹å¾€å‰?é€’å‡?ï¼Œä»¥æ­¤å®žçŽ°æ—¶é—´é€’å‡?é¡ºåº?ï¼ˆæœ€è¿‘è®¿é—®çš„æ–‡ä»¶ï¼Œä¼˜å…ˆæ˜¾ç¤ºï¼‰
        if (cursor.moveToLast()) {
            do {
                //è¾“å‡ºæ–‡ä»¶çš„å®Œæ•´è·¯å¾„
                String data = cursor.getString(0);
                Log.d("tag", data);
                fileUrls.add(data);

            } while (cursor.moveToPrevious());
        }
        cursor.close();
        List<File> rets = new ArrayList<>();
        for (int i = 0; i < fileUrls.size(); i++) {
            File file = new File(fileUrls.get(i));
            rets.add(file);
        }
        Log.d("ccccccc", "getSpecificTypeOfFile: " + rets.size());
        return rets;
    }

