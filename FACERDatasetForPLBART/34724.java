    /**
     * åˆ†å?‘äº‹ä»¶ï¼Œä¸»è¦?å?šçš„æ˜¯åˆ¤æ–­ç‚¹å‡»çš„æ˜¯é‚£ä¸ªitem, ä»¥å?Šé€šè¿‡postDelayedæ?¥è®¾ç½®å“?åº”å·¦å?³æ»‘åŠ¨äº‹ä»¶
     */
    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                addVelocityTracker(event);

                // å?‡å¦‚scrolleræ»šåŠ¨è¿˜æ²¡æœ‰ç»“æ?Ÿï¼Œæˆ‘ä»¬ç›´æŽ¥è¿”å›ž
                if (!scroller.isFinished()) {
                    return super.dispatchTouchEvent(event);
                }
                downX = (int) event.getX();
                downY = (int) event.getY();

                slidePosition = pointToPosition(downX, downY);

                // æ— æ•ˆçš„position, ä¸?å?šä»»ä½•å¤„ç?†
                if (slidePosition == AdapterView.INVALID_POSITION) {
                    return super.dispatchTouchEvent(event);
                }

                // èŽ·å?–æˆ‘ä»¬ç‚¹å‡»çš„item view
                itemView = getChildAt(slidePosition - getFirstVisiblePosition());
                break;
            }
            case MotionEvent.ACTION_MOVE: {
                if (Math.abs(getScrollVelocity()) > SNAP_VELOCITY
                        || (Math.abs(event.getX() - downX) > mTouchSlop && Math
                        .abs(event.getY() - downY) < mTouchSlop)) {
                    isSlide = true;

                }
                break;
            }
            case MotionEvent.ACTION_UP:
                recycleVelocityTracker();
                break;
        }

        return super.dispatchTouchEvent(event);
    }

