    /**
     * èŽ·å?–å¤©æ°”
     * <p/>
     * å…ˆæ£€æµ‹å–œæ¬¢åŸŽå¸‚çš„æ•°æ?®åº“æ˜¯å?¦ä¸ºç©ºï¼Œæ˜¯çš„è¯?ï¼Œæ·»åŠ é»˜è®¤åŸŽå¸‚æˆ?éƒ½ã€‚
     * æŸ¥è¯¢å¤©æ°”æ•°æ?®åº“ï¼Œå¿…è¦?æ—¶è¿›è¡Œç½‘ç»œè¯·æ±‚
     */
    private void getWeatherData() {
        final List<LoveCityEntity> loveCities = mCityRepository.getAllLoveCities();
        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
        for (int i = 0; i < loveCities.size(); i++) {
            final int index = i;
            singleThreadExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        mWeatherRepository.updateCityWeather(loveCities.get(index).getCityName());
                    } catch (Exception e) {
                        Logger.e(e,"é—®é¢˜");
                        MainThreadAction.getInstance().post(new Runnable() {
                            @Override
                            public void run() {
                                MyToast.createMyToast().showToast(getApplicationContext(),"ç½‘ç»œå‡ºé”™");
//                                Toast.makeText(BackGroundService.this,"ç½‘ç»œé”™è¯¯",Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                }
            });
        }
    }

